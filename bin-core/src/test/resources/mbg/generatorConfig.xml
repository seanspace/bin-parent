<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration  
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- propertis 配置文件-->
	<properties resource="mbg/generatorConfig.properties" />

	<!-- MBG根配置 -->
    <!-- defaultModelType是conditional则会将blob类型的column分离到子类中 -->
	<context id="MBG" targetRuntime="MyBatis3" defaultModelType="flat">

		<!-- 生成hashCode()和equals()方法的插件 -->
		<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

		<!-- bean类序列化插件 -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

		<!-- sql like 查询是否区分大小写插件 -->
		<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />

		<!-- 生成toString() 方法插件 -->
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

		<!-- 重命名Bean查询条件类的类名，默认命名Example -->
		<plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
			<property name="searchString" value="Example$" />
			<property name="replaceString" value="Param" />
		</plugin>

        <!-- 重命名Bean查询条件类的类名，默认命名Example -->
        <plugin type="mybatis.generator.plugin.rename.RenameExampleClassAndMethodsPlugin">
            <property name="classMethodSearchString" value="Example" />
            <property name="classMethodReplaceString" value="Filter" />
            <property name="parameterSearchString" value="example" />
            <property name="parameterReplaceString" value="filter" />
        </plugin>

		<!-- *******************************下面的插件都是自定义插件******************************* -->
		<!-- 分页插件， 自带的是假分页，效率很低  -->
		<!--<plugin type="mybatis.generator.plugin.PaginationPlugin" />-->

		<!-- 生成别名，在表关联简单查询时使用  -->
		<!--<plugin type="mybatis.generator.plugin.alias.AliasPlugin" />-->

		<!-- 单独生成一个DAO的JAVA文件和XML文件，存放自定义SQL，将自动生成和自定义分开 -->
		<plugin type="mybatis.generator.plugin.DAOPlugin" >
			<property name="typeName" value="Dao"/>
            <property name="annotationClass" value="org.springframework.stereotype.Repository" />
            <property name="annotationString" value="@Repository" />
			<property name="overwrite" value="false" />
		</plugin>

		<!-- 生成business，简单的增删改查业务 -->
		<!--<plugin type="mybatis.generator.plugin.business.BusinessPlugin" >-->
			<!--<property name="businessPackage" value="${businessPackage}"/>-->
		<!--</plugin>-->

        <!--<plugin type="mybatis.generator.plugin.annotation.AddClassAnnotationsPlugin">-->
            <!--<property name="annotationClass" value="org.springframework.stereotype.Repository" />-->
            <!--<property name="annotationString" value="@Repository" />-->
            <!--&lt;!&ndash;<property name="clazzPattern" value="*Dao,*Mapper" />&ndash;&gt;-->
        <!--</plugin>-->

		<!-- *******************************上面的插件都是自定义插件******************************* -->

		<!-- 生成的注释配置，不输入注释中的时间 -->
		<commentGenerator type="mybatis.generator.internal.CustomerCommentGenerator">
			<property name="suppressAllComments" value="true" />
			<!--<property name="suppressDate" value="true" />-->
            <!--<property name="addRemarkComments" value="true" />-->
		</commentGenerator>

		<!-- 数据库连接信息 -->
		<jdbcConnection driverClass="${driver}" connectionURL="${url}"
			userId="${user}" password="${password}">
		</jdbcConnection>

		<!-- Java 生成的bean中字段类型配置 -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 生成实体类和param的配置 -->
		<javaModelGenerator targetPackage="${modelPackage}"
			targetProject="${javabase}">
			<property name="enableSubPackages" value="true" />
            <property name="overwrite" value="true" />
			<property name="rootClass" value="com.yeepay.g3.utils.persistence.EntityVersion&lt;Long&gt;" />
		</javaModelGenerator>

		<!-- 生成xml文件的配置 -->
		<sqlMapGenerator targetPackage="${sqlMapPackage}"
			targetProject="${resbase}">
			<property name="enableSubPackages" value="true" />
            <property name="overwrite" value="true" />
		</sqlMapGenerator>

		<!-- java 生成 mapper类的配置 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="${javaClientPackage}" targetProject="${javabase}">
			<property name="enableSubPackages" value="true" />
            <property name="overwrite" value="true" />
		</javaClientGenerator>

		<!-- 配置需要自动生成的表，可配置多个table标签 -->
        <!--<table tableName="YMF_CUSTOMER" domainObjectName="Customer">-->
            <!--<property name="generatedBusinessName" value="CustomerService" />-->
			<!--<generatedKey column="id" sqlStatement="NEXTVAL FOR SEQ_CUSTOMER_ID"-->
						  <!--identity="true" />-->
            <!--<columnOverride column="STATUS" javaType="com.yeepay.g3.core.ymf.enumtype.Status" />-->
        <!--</table>-->


        <!--<table tableName="YMF_QRCODE" domainObjectName="Qrcode">-->
            <!--<property name="generatedBusinessName" value="QrcodeService" />-->
			<!--<generatedKey column="id" sqlStatement="SELECT NEXTVAL FOR SEQ_QRCODE_ID FROM YMF_QRCODE"-->
						  <!--identity="true" />-->
        <!--</table>-->

		<!--<table tableName="YMF_ORDER" domainObjectName="order.Order">-->
			<!--<generatedKey column="ID" sqlStatement="NEXTVAL FOR YMF_ORDER_SEQ" identity="false"/>-->
		<!--</table>-->

		<table tableName="YMF_GRATUITY" domainObjectName="Gratuity">
			<generatedKey column="ID" sqlStatement="NEXTVAL FOR YMF_GRATUITY_SEQ" identity="false"/>
			<columnOverride column="STATUS" javaType="com.yeepay.g3.core.ymf.enumtype.Status" />
		</table>

	</context>
</generatorConfiguration>